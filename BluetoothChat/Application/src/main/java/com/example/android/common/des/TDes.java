package com.example.android.common.des;

/**
 * Created by shen on 4/9/17.
 */


import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
//import java.util.Base64;

//import sun.misc.BASE64Encoder;
import android.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;



public class TDes {
    private static byte[] key = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02,0x03, 0x03, 0x03, 0x03  };

    private static byte[] keyiv = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00 };

    //public static void main(String[] args){

    //    TDes app = new TDes();
    //    System.out.println("Encode="+app.encode("hello"));
    //    System.out.println("Decode="+app.decode(app.encode("hello")));
    //    System.out.println("session key = "+app.sessionkey());
    //}

    public static double secureRandom(){

        double random = 0.0;

        try {
            // Initialize a secure random number generator
            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");

            // Method 1 - Calling nextBytes method to generate Random Bytes
            byte[] bytes = new byte[512];
            secureRandom.nextBytes(bytes);
            random = secureRandom.nextDouble();

            // Printing the SecureRandom number by calling secureRandom.nextDouble()
            //System.out.println(" Secure Random # generated by calling nextBytes() is " + random);

            // Method 2 - Using setSeed(byte[]) to reseed a Random object
            //int seedByteCount = 10;
            //byte[] seed = secureRandom.generateSeed(seedByteCount);

            // TBR System.out.println(" Seed value is " + new BASE64Encoder().encode(seed));

            //secureRandom.setSeed(seed);
            //random = secureRandom.nextDouble();

            //System.out.println(" Secure Random # generated using setSeed(byte[]) is  " + random);

        } catch (NoSuchAlgorithmException noSuchAlgo)
        {
            System.out.println(" No Such Algorithm exists " + noSuchAlgo);
        }

        return random;

    }



    public static byte[] updateKey(String sessionKey1, String sessionKey2){

        byte[] mykey = new byte[key.length];
        byte[] sessionBytes1 = sessionKey1.getBytes();
        byte[] sessionBytes2 = sessionKey2.getBytes();
        byte[] sessionBytes = new byte[mykey.length];

        for(int i = 0; i < sessionBytes1.length && i < sessionBytes2.length; i++){
            sessionBytes[i] = (byte)(sessionBytes1[i]^sessionBytes2[i]);
        }
        if(sessionBytes1.length < sessionBytes2.length){

            for(int i = sessionBytes1.length; i < sessionBytes2.length;i++)
                sessionBytes[i] = sessionBytes2[i];
        }
        else{
            for(int i = sessionBytes2.length; i < sessionBytes1.length; i++){

                sessionBytes[i] = sessionBytes1[i];
            }
        }

        for(int i = 0; i < mykey.length; i++){
            if(i < sessionBytes.length)
                mykey[i] = (byte)((sessionBytes[i]&0xff)^mykey[i]);
            else
                mykey[i] = (byte)((0x00 & 0xff)^mykey[i]);
        }



        return mykey;

    }


    public static String sessionKey(){

        String sessionKey = "";
        try{
            KeyGenerator keyGen = KeyGenerator.getInstance("DES");
            SecretKey secretKey = keyGen.generateKey();
            sessionKey += secretKey.toString().split("@")[1];



        }
        catch (NoSuchAlgorithmException noSuchAlgo){
            System.out.println(" No Such Algorithm exists " + noSuchAlgo);


        }

        return sessionKey;
    }



    public static String encode(String args) {


        System.out.println("plain data==>  " + args);

        byte[] encoding;
        try {
            encoding = Base64.encode(args.getBytes("UTF-8"),Base64.DEFAULT);

            System.out.println("Base64.encodeBase64==>" + new String(encoding));
            byte[] str5 = des3EncodeCBC(key, keyiv, encoding);

            System.out.println("des3EncodeCBC==>  " + new String(str5));

            byte[] encoding1 = Base64.encode(str5,Base64.DEFAULT);
            System.out.println("Base64.encodeBase64==> " + new String(encoding1));
            return new String(encoding1);
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }


    public static String decode(String args) {
        try {
            System.out.println("encrypted data==>" + new String(args.getBytes("UTF-8")));


            byte[] decode = Base64.decode(args.getBytes("UTF-8"),Base64.DEFAULT);
            System.out.println("Base64.decodeBase64(main encription)==>" + new String(decode));

            byte[] str6 = des3DecodeCBC(key, keyiv, decode);
            System.out.println("des3DecodeCBC==>" + new String(str6));
            String data=new String(str6);
            byte[] decode1 = Base64.decode(data.trim().getBytes("UTF-8"),Base64.DEFAULT);
            System.out.println("plaintext==>  " + new String(decode1));
            return new String(decode1);
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return "u mistaken in try block";

    }



    private static byte[] des3EncodeCBC(byte[] key, byte[] keyiv, byte[] data) {
        try {
            Key deskey = null;
            DESedeKeySpec spec = new DESedeKeySpec(key);
            SecretKeyFactory keyfactory = SecretKeyFactory.getInstance("desede");
            deskey = keyfactory.generateSecret(spec);

            Cipher cipher = Cipher.getInstance("desede/ CBC/PKCS5Padding");
            IvParameterSpec ips = new IvParameterSpec(keyiv);
            cipher.init(Cipher.ENCRYPT_MODE, deskey, ips);
            byte[] bout = cipher.doFinal(data);
            return bout;

        } catch (Exception e) {
            System.out.println("methods qualified name" + e);
        }
        return null;

    }

    private static byte[] des3DecodeCBC(byte[] key, byte[] keyiv, byte[] data) {
        try {
            Key deskey = null;
            DESedeKeySpec spec = new DESedeKeySpec(key);
            SecretKeyFactory keyfactory = SecretKeyFactory.getInstance("desede");
            deskey = keyfactory.generateSecret(spec);

            Cipher cipher = Cipher.getInstance("desede/ CBC/PKCS5Padding");//PKCS5Padding
            IvParameterSpec ips = new IvParameterSpec(keyiv);
            cipher.init(Cipher.DECRYPT_MODE, deskey, ips);

            byte[] bout = cipher.doFinal(data);


            return bout;

        } catch (Exception e) {
            System.out.println("methods qualified name" + e);
        }

        return null;

    }

}
